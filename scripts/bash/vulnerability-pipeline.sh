#!/bin/bash
#
# RustScan Vulnerability Pipeline Script
# Pipeline automatizado para detección y análisis de vulnerabilidades
# Integra múltiples herramientas de seguridad con RustScan como descubridor
#

set -euo pipefail

# Configuración
TARGETS_FILE="${1:-targets.txt}"
SCAN_INTENSITY="${2:-standard}"
OUTPUT_DIR="vuln_scan_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="$OUTPUT_DIR/vulnerability_scan.log"

# Configuración de intensidad
case $SCAN_INTENSITY in
    "light")
        RUSTSCAN_OPTS="--timeout 1000 -b 5000"
        NMAP_SCRIPTS="default,safe"
        ;;
    "standard")
        RUSTSCAN_OPTS="--timeout 1500 -b 10000"
        NMAP_SCRIPTS="default,safe,vuln"
        ;;
    "aggressive")
        RUSTSCAN_OPTS="--timeout 2000 -b 15000"
        NMAP_SCRIPTS="default,safe,vuln,exploit"
        ;;
    *)
        echo "Intensidad no reconocida: $SCAN_INTENSITY"
        echo "Opciones: light, standard, aggressive"
        exit 1
        ;;
esac

# Función de logging
log() {
    local level=$1
    shift
    local message=$*
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] $level: $message" | tee -a "$LOG_FILE"
}

# Verificación inicial
initial_checks() {
    log "INFO" "Iniciando verificaciones del sistema..."
    
    if ! command -v rustscan &> /dev/null; then
        log "ERROR" "RustScan no encontrado"
        exit 1
    fi
    
    if ! command -v nmap &> /dev/null; then
        log "ERROR" "Nmap no encontrado" 
        exit 1
    fi
    
    if [ ! -f "$TARGETS_FILE" ]; then
        log "ERROR" "Archivo de targets no encontrado: $TARGETS_FILE"
        exit 1
    fi
    
    mkdir -p "$OUTPUT_DIR"
    log "SUCCESS" "Verificaciones completadas"
}

# Fase 1: Descubrimiento de activos
asset_discovery() {
    log "INFO" "=== FASE 1: DESCUBRIMIENTO DE ACTIVOS ==="
    
    # Descubrimiento rápido con RustScan
    log "INFO" "Ejecutando descubrimiento de activos..."
    rustscan -a "-" $RUSTSCAN_OPTS --greppable < "$TARGETS_FILE" > "$OUTPUT_DIR/01_asset_discovery.txt"
    
    # Procesar hosts activos
    grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' "$OUTPUT_DIR/01_asset_discovery.txt" | sort -u > "$OUTPUT_DIR/02_live_assets.txt"
    
    local asset_count
    asset_count=$(wc -l < "$OUTPUT_DIR/02_live_assets.txt")
    log "SUCCESS" "Activos descubiertos: $asset_count"
    
    echo "$asset_count"
}

# Fase 2: Perfilado de servicios
service_profiling() {
    local asset_count=$1
    
    log "INFO" "=== FASE 2: PERFILADO DE SERVICIOS ==="
    
    if [ "$asset_count" -eq 0 ]; then
        log "WARNING" "No hay activos para perfilar"
        return
    fi
    
    # Crear categorías de servicios
    mkdir -p "$OUTPUT_DIR/services"
    
    # Escanear y categorizar servicios
    while IFS= read -r asset; do
        log "INFO" "Perfilando servicios en: $asset"
        
        # Escaneo completo con RustScan + Nmap
        rustscan -a "$asset" $RUSTSCAN_OPTS -- -sV --script "$NMAP_SCRIPTS" -oA "$OUTPUT_DIR/services/profile_$asset" &
        
        # Control de concurrencia
        local jobs_count
        jobs_count=$(jobs -rp | wc -l)
        while [ "$jobs_count" -ge 3 ]; do
            sleep 3
            jobs_count=$(jobs -rp | wc -l)
        done
        
    done < "$OUTPUT_DIR/02_live_assets.txt"
    
    wait
    log "SUCCESS" "Perfilado de servicios completado"
}

# Fase 3: Detección de vulnerabilidades
vulnerability_detection() {
    log "INFO" "=== FASE 3: DETECCION DE VULNERABILIDADES ==="
    
    # Categorizar servicios por tipo para análisis específico
    categorize_services_for_analysis
    
    # Ejecutar análisis específicos por categoría
    analyze_web_services
    analyze_network_services
    analyze_database_services
    analyze_ssh_services
    
    log "SUCCESS" "Deteccion de vulnerabilidades completada"
}

# Categorizar servicios para análisis específico
categorize_services_for_analysis() {
    log "INFO" "Categorizando servicios para analisis especifico..."
    
    # Inicializar categorías
    > "$OUTPUT_DIR/03_web_services.txt"
    > "$OUTPUT_DIR/03_ssh_services.txt"
    > "$OUTPUT_DIR/03_database_services.txt"
    > "$OUTPUT_DIR/03_network_services.txt"
    
    while IFS= read -r asset; do
        local profile_file="$OUTPUT_DIR/services/profile_${asset}.nmap"
        
        if [ ! -f "$profile_file" ]; then
            continue
        fi
        
        # Servicios web
        if grep -q "80/open\|443/open\|8080/open\|8443/open" "$profile_file"; then
            echo "$asset" >> "$OUTPUT_DIR/03_web_services.txt"
        fi
        
        # Servicios SSH
        if grep -q "22/open" "$profile_file"; then
            echo "$asset" >> "$OUTPUT_DIR/03_ssh_services.txt"
        fi
        
        # Servicios de base de datos
        if grep -q "3306/open\|5432/open\|1433/open\|1521/open\|27017/open" "$profile_file"; then
            echo "$asset" >> "$OUTPUT_DIR/03_database_services.txt"
        fi
        
        # Servicios de red
        if grep -q "21/open\|23/open\|25/open\|53/open\|135/open\|139/open\|445/open" "$profile_file"; then
            echo "$asset" >> "$OUTPUT_DIR/03_network_services.txt"
        fi
        
    done < "$OUTPUT_DIR/02_live_assets.txt"
    
    local web_count ssh_count db_count net_count
    web_count=$(wc -l < "$OUTPUT_DIR/03_web_services.txt" 2>/dev/null || echo 0)
    ssh_count=$(wc -l < "$OUTPUT_DIR/03_ssh_services.txt" 2>/dev/null || echo 0)
    db_count=$(wc -l < "$OUTPUT_DIR/03_database_services.txt" 2>/dev/null || echo 0)
    net_count=$(wc -l < "$OUTPUT_DIR/03_network_services.txt" 2>/dev/null || echo 0)
    
    log "INFO" "Servicios categorizados:"
    log "INFO" "  - Web: $web_count"
    log "INFO" "  - SSH: $ssh_count"
    log "INFO" "  - Database: $db_count"
    log "INFO" "  - Network: $net_count"
}

# Análisis de servicios web
analyze_web_services() {
    local web_count
    web_count=$(wc -l < "$OUTPUT_DIR/03_web_services.txt" 2>/dev/null || echo 0)
    
    if [ "$web_count" -eq 0 ]; then
        log "INFO" "No hay servicios web para analizar"
        return
    fi
    
    log "INFO" "Ejecutando analisis de vulnerabilidades web..."
    mkdir -p "$OUTPUT_DIR/web_analysis"
    
    while IFS= read -r asset; do
        log "INFO" "Analizando servicios web en: $asset"
        
        # Determinar protocolo y puerto
        local protocol="http"
        local port=80
        
        if grep -q "443/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            protocol="https"
            port=443
        elif grep -q "8443/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            protocol="https" 
            port=8443
        elif grep -q "8080/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            port=8080
        fi
        
        local url="$protocol://$asset:$port"
        
        # WhatWeb para fingerprinting
        if command -v whatweb &> /dev/null; then
            log "INFO" "  - Ejecutando WhatWeb en $url"
            whatweb --color=never "$url" > "$OUTPUT_DIR/web_analysis/whatweb_$asset.txt" 2>&1 &
        fi
        
        # Nikto para escaneo de vulnerabilidades
        if command -v nikto &> /dev/null; then
            log "INFO" "  - Ejecutando Nikto en $asset"
            timeout 300 nikto -h "$asset" -p "$port" -o "$OUTPUT_DIR/web_analysis/nikto_$asset.txt" -Format txt 2>/dev/null &
        fi
        
        # Test de headers de seguridad
        if command -v curl &> /dev/null; then
            log "INFO" "  - Analizando headers de seguridad en $url"
            curl -I --connect-timeout 5 "$url" 2>/dev/null > "$OUTPUT_DIR/web_analysis/headers_$asset.txt" &
        fi
        
    done < "$OUTPUT_DIR/03_web_services.txt"
    
    wait
    log "SUCCESS" "Analisis de servicios web completado"
}

# Análisis de servicios de red
analyze_network_services() {
    local net_count
    net_count=$(wc -l < "$OUTPUT_DIR/03_network_services.txt" 2>/dev/null || echo 0)
    
    if [ "$net_count" -eq 0 ]; then
        log "INFO" "No hay servicios de red para analizar"
        return
    fi
    
    log "INFO" "Ejecutando analisis de servicios de red..."
    mkdir -p "$OUTPUT_DIR/network_analysis"
    
    while IFS= read -r asset; do
        log "INFO" "Analizando servicios de red en: $asset"
        
        # Análisis SMB
        if grep -q "445/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando servicio SMB en $asset"
            nmap -p 445 --script "smb*,smb-vuln*" "$asset" > "$OUTPUT_DIR/network_analysis/smb_$asset.txt" 2>&1 &
        fi
        
        # Análisis FTP
        if grep -q "21/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando servicio FTP en $asset"
            nmap -p 21 --script "ftp*,ftp-vuln*" "$asset" > "$OUTPUT_DIR/network_analysis/ftp_$asset.txt" 2>&1 &
        fi
        
        # Análisis DNS
        if grep -q "53/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando servicio DNS en $asset"
            nmap -p 53 --script "dns*" "$asset" > "$OUTPUT_DIR/network_analysis/dns_$asset.txt" 2>&1 &
        fi
        
    done < "$OUTPUT_DIR/03_network_services.txt"
    
    wait
    log "SUCCESS" "Analisis de servicios de red completado"
}

# Análisis de servicios de base de datos
analyze_database_services() {
    local db_count
    db_count=$(wc -l < "$OUTPUT_DIR/03_database_services.txt" 2>/dev/null || echo 0)
    
    if [ "$db_count" -eq 0 ]; then
        log "INFO" "No hay servicios de base de datos para analizar"
        return
    fi
    
    log "INFO" "Ejecutando analisis de servicios de base de datos..."
    mkdir -p "$OUTPUT_DIR/database_analysis"
    
    while IFS= read -r asset; do
        log "INFO" "Analizando servicios de base de datos en: $asset"
        
        # MySQL
        if grep -q "3306/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando MySQL en $asset"
            nmap -p 3306 --script "mysql*,mysql-vuln*" "$asset" > "$OUTPUT_DIR/database_analysis/mysql_$asset.txt" 2>&1 &
        fi
        
        # PostgreSQL
        if grep -q "5432/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando PostgreSQL en $asset"
            nmap -p 5432 --script "pgsql*,pgsql-vuln*" "$asset" > "$OUTPUT_DIR/database_analysis/postgresql_$asset.txt" 2>&1 &
        fi
        
        # MongoDB
        if grep -q "27017/open" "$OUTPUT_DIR/services/profile_${asset}.nmap"; then
            log "INFO" "  - Analizando MongoDB en $asset"
            nmap -p 27017 --script "mongodb*" "$asset" > "$OUTPUT_DIR/database_analysis/mongodb_$asset.txt" 2>&1 &
        fi
        
    done < "$OUTPUT_DIR/03_database_services.txt"
    
    wait
    log "SUCCESS" "Analisis de servicios de base de datos completado"
}

# Análisis de servicios SSH
analyze_ssh_services() {
    local ssh_count
    ssh_count=$(wc -l < "$OUTPUT_DIR/03_ssh_services.txt" 2>/dev/null || echo 0)
    
    if [ "$ssh_count" -eq 0 ]; then
        log "INFO" "No hay servicios SSH para analizar"
        return
    fi
    
    log "INFO" "Ejecutando analisis de servicios SSH..."
    mkdir -p "$OUTPUT_DIR/ssh_analysis"
    
    while IFS= read -r asset; do
        log "INFO" "Analizando servicio SSH en: $asset"
        
        # Análisis completo de SSH
        nmap -p 22 --script "ssh2-enum-algos,ssh-auth-methods,ssh-hostkey,sshv1" "$asset" > "$OUTPUT_DIR/ssh_analysis/ssh_$asset.txt" 2>&1 &
        
    done < "$OUTPUT_DIR/03_ssh_services.txt"
    
    wait
    log "SUCCESS" "Analisis de servicios SSH completado"
}

# Fase 4: Consolidación de resultados
results_consolidation() {
    log "INFO" "=== FASE 4: CONSOLIDACION DE RESULTADOS ==="
    
    # Reporte ejecutivo de vulnerabilidades
    {
        echo "VULNERABILITY ASSESSMENT REPORT"
        echo "==============================="
        echo "Fecha: $(date)"
        echo "Targets: $(wc -l < "$TARGETS_FILE")"
        echo "Activos descubiertos: $(wc -l < "$OUTPUT_DIR/02_live_assets.txt")"
        echo "Intensidad de escaneo: $SCAN_INTENSITY"
        echo ""
        echo "RESUMEN DE SERVICIOS:"
        echo "- Servicios web: $(wc -l < "$OUTPUT_DIR/03_web_services.txt" 2>/dev/null || echo 0)"
        echo "- Servicios SSH: $(wc -l < "$OUTPUT_DIR/03_ssh_services.txt" 2>/dev/null || echo 0)"
        echo "- Servicios de base de datos: $(wc -l < "$OUTPUT_DIR/03_database_services.txt" 2>/dev/null || echo 0)"
        echo "- Servicios de red: $(wc -l < "$OUTPUT_DIR/03_network_services.txt" 2>/dev/null || echo 0)"
        echo ""
        echo "HALLAZGOS CRITICOS:"
        echo "------------------"
        
        # Buscar vulnerabilidades críticas en resultados
        find "$OUTPUT_DIR" -name "*.txt" -exec grep -l -i "vulnerable\|vuln\|CVE-\|exploit" {} \; | head -10 | while read file; do
            echo "ARCHIVO: $file"
            grep -i "vulnerable\|vuln\|CVE-\|exploit" "$file" | head -3
            echo ""
        done
        
        echo "ARCHIVOS GENERADOS:"
        echo "------------------"
        find "$OUTPUT_DIR" -type f -name "*.txt" -o -name "*.nmap" | sort
        
    } > "$OUTPUT_DIR/04_vulnerability_report.txt"
    
    # Reporte técnico detallado
    {
        echo "REPORTE TECNICO DETALLADO"
        echo "========================"
        echo ""
        echo "CONFIGURACION DE ESCANEO:"
        echo "- RustScan options: $RUSTSCAN_OPTS"
        echo "- Nmap scripts: $NMAP_SCRIPTS"
        echo ""
        echo "ACTIVOS Y SERVICIOS:"
        echo ""
        
        while IFS= read -r asset; do
            echo "ASSET: $asset"
            echo "------"
            if [ -f "$OUTPUT_DIR/services/profile_${asset}.nmap" ]; then
                grep "open" "$OUTPUT_DIR/services/profile_${asset}.nmap" | head -5
            fi
            echo ""
        done < "$OUTPUT_DIR/02_live_assets.txt"
        
    } > "$OUTPUT_DIR/05_technical_report.txt"
    
    log "SUCCESS" "Consolidacion de resultados completada"
}

# Función principal
main() {
    log "INFO" "Iniciando pipeline de vulnerabilidades con RustScan"
    log "INFO" "Targets: $TARGETS_FILE"
    log "INFO" "Intensidad: $SCAN_INTENSITY"
    
    # Verificaciones iniciales
    initial_checks
    
    # Ejecutar pipeline completo
    local asset_count
    asset_count=$(asset_discovery)
    
    if [ "$asset_count" -eq 0 ]; then
        log "WARNING" "No se encontraron activos. Finalizando pipeline."
        exit 0
    fi
    
    service_profiling "$asset_count"
    vulnerability_detection
    results_consolidation
    
    log "SUCCESS" "Pipeline de vulnerabilidades completado exitosamente"
    log "INFO" "Resultados guardados en: $OUTPUT_DIR"
    log "INFO" "Reporte principal: $OUTPUT_DIR/04_vulnerability_report.txt"
}

# Manejo de señales
trap 'log "ERROR" "Pipeline interrumpido por el usuario"; exit 1' INT TERM

# Ejecución principal
if [ $# -eq 0 ]; then
    echo "Uso: $0 <targets_file> [scan_intensity]"
    echo "Targets: Archivo con lista de IPs/hosts"
    echo "Intensidades: light, standard, aggressive"
    echo "Ejemplo: $0 targets.txt aggressive"
    exit 1
fi

main "$@"