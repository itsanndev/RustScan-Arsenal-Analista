#!/bin/bash
#
# RustScan Pentesting Workflow Script
# Flujo completo de pentesting integrando RustScan con herramientas de seguridad
#

set -euo pipefail

# Configuración
TARGET="${1:-192.168.1.0/24}"
SCAN_TYPE="${2:-comprehensive}"
OUTPUT_DIR="pentest_$(date +%Y%m%d_%H%M%S)"
LOG_FILE="$OUTPUT_DIR/pentest.log"

# Configuración de escaneos
case $SCAN_TYPE in
    "quick")
        RUSTSCAN_OPTS="--timeout 1000 -b 20000"
        NMAP_OPTS="-sC -sV"
        ;;
    "stealth")
        RUSTSCAN_OPTS="--timeout 3000 -b 1000 --scan-order Random"
        NMAP_OPTS="-sS -T2"
        ;;
    "comprehensive")
        RUSTSCAN_OPTS="--timeout 2000 -b 15000"
        NMAP_OPTS="-sC -sV -A -O"
        ;;
    *)
        echo "Tipo de escaneo no reconocido: $SCAN_TYPE"
        echo "Opciones: quick, stealth, comprehensive"
        exit 1
        ;;
esac

# Función de logging
log() {
    local level=$1
    shift
    local message=$*
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] $level: $message" | tee -a "$LOG_FILE"
}

# Verificación de herramientas
check_tools() {
    log "INFO" "Verificando herramientas de pentesting..."
    
    local tools=("rustscan" "nmap" "curl" "whatweb" "nikto" "gobuster")
    local missing_tools=()
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
            log "WARNING" "Herramienta no disponible: $tool"
        else
            log "INFO" "Herramienta disponible: $tool"
        fi
    done
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log "WARNING" "Algunas herramientas no estan disponibles: ${missing_tools[*]}"
    fi
}

# Fase 1: Reconocimiento y descubrimiento
reconnaissance_phase() {
    log "INFO" "=== FASE 1: RECONOCIMIENTO ==="
    log "INFO" "Objetivo: $TARGET"
    log "INFO" "Tipo de escaneo: $SCAN_TYPE"
    
    mkdir -p "$OUTPUT_DIR"
    
    # Descubrimiento de hosts con RustScan
    log "INFO" "Ejecutando descubrimiento de hosts..."
    rustscan -a "$TARGET" $RUSTSCAN_OPTS --greppable > "$OUTPUT_DIR/01_discovery.txt"
    
    # Extraer hosts activos
    grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' "$OUTPUT_DIR/01_discovery.txt" | sort -u > "$OUTPUT_DIR/02_live_hosts.txt"
    
    local host_count=$(wc -l < "$OUTPUT_DIR/02_live_hosts.txt")
    log "SUCCESS" "Hosts activos descubiertos: $host_count"
    
    # Mostrar hosts descubiertos
    if [ "$host_count" -gt 0 ]; then
        log "INFO" "Hosts descubiertos:"
        cat "$OUTPUT_DIR/02_live_hosts.txt" | while read host; do
            log "INFO" "  - $host"
        done
    fi
    
    echo "$host_count"
}

# Fase 2: Escaneo de servicios
service_scan_phase() {
    local host_count=$1
    
    log "INFO" "=== FASE 2: ESCANEO DE SERVICIOS ==="
    
    if [ "$host_count" -eq 0 ]; then
        log "WARNING" "No hay hosts para escanear. Saltando fase de servicios."
        return
    fi
    
    # Escanear servicios en cada host
    while IFS= read -r host; do
        log "INFO" "Escaneando servicios en: $host"
        
        # RustScan + Nmap integrado
        rustscan -a "$host" $RUSTSCAN_OPTS -- $NMAP_OPTS -oA "$OUTPUT_DIR/03_services_$host" &
        
        # Control de concurrencia (max 3 escaneos simultáneos)
        local background_jobs=$(jobs -rp | wc -l)
        while [ "$background_jobs" -ge 3 ]; do
            sleep 5
            background_jobs=$(jobs -rp | wc -l)
        done
        
    done < "$OUTPUT_DIR/02_live_hosts.txt"
    
    wait
    log "SUCCESS" "Escaneo de servicios completado"
}

# Fase 3: Análisis de vulnerabilidades
vulnerability_analysis_phase() {
    log "INFO" "=== FASE 3: ANALISIS DE VULNERABILIDADES ==="
    
    # Identificar servicios web
    log "INFO" "Identificando servicios web..."
    > "$OUTPUT_DIR/04_web_hosts.txt"
    
    while IFS= read -r host; do
        if [ -f "$OUTPUT_DIR/03_services_${host}.nmap" ] && \
           grep -q "80/open\|443/open\|8080/open\|8443/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
            echo "$host" >> "$OUTPUT_DIR/04_web_hosts.txt"
            log "INFO" "Servicio web detectado en: $host"
        fi
    done < "$OUTPUT_DIR/02_live_hosts.txt"
    
    local web_hosts_count=$(wc -l < "$OUTPUT_DIR/04_web_hosts.txt" 2>/dev/null || echo 0)
    
    if [ "$web_hosts_count" -gt 0 ]; then
        # Escaneo de vulnerabilidades web
        log "INFO" "Ejecutando analisis de vulnerabilidades web..."
        
        while IFS= read -r host; do
            log "INFO" "Analizando vulnerabilidades en: $host"
            
            # Determinar protocolo y puerto
            local protocol="http"
            local port=80
            
            if grep -q "443/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
                protocol="https"
                port=443
            elif grep -q "8443/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
                protocol="https" 
                port=8443
            elif grep -q "8080/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
                port=8080
            fi
            
            local url="$protocol://$host:$port"
            
            # WhatWeb para fingerprinting
            if command -v whatweb &> /dev/null; then
                log "INFO" "  - Ejecutando WhatWeb en $url"
                whatweb --color=never "$url" > "$OUTPUT_DIR/05_whatweb_$host.txt" 2>&1 &
            fi
            
            # Nikto para escaneo de vulnerabilidades
            if command -v nikto &> /dev/null; then
                log "INFO" "  - Ejecutando Nikto en $host"
                nikto -h "$host" -p "$port" -o "$OUTPUT_DIR/06_nikto_$host.txt" -Format txt &
            fi
            
            # Directory busting básico
            if command -v gobuster &> /dev/null && [ -f "/usr/share/wordlists/dirb/common.txt" ]; then
                log "INFO" "  - Ejecutando GoBuster en $url"
                gobuster dir -u "$url" -w /usr/share/wordlists/dirb/common.txt \
                    -t 10 -o "$OUTPUT_DIR/07_gobuster_$host.txt" 2>/dev/null &
            fi
            
        done < "$OUTPUT_DIR/04_web_hosts.txt"
        
        wait
        log "SUCCESS" "Analisis de vulnerabilidades web completado"
    else
        log "INFO" "No se encontraron servicios web para analizar"
    fi
}

# Fase 4: Análisis de servicios específicos
specific_service_analysis() {
    log "INFO" "=== FASE 4: ANALISIS DE SERVICIOS ESPECIFICOS ==="
    
    while IFS= read -r host; do
        if [ ! -f "$OUTPUT_DIR/03_services_${host}.nmap" ]; then
            continue
        fi
        
        log "INFO" "Analizando servicios especificos en: $host"
        
        # SSH Analysis
        if grep -q "22/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
            log "INFO" "  - Analizando servicio SSH"
            nmap -p 22 --script "ssh2-enum-algos,ssh-auth-methods,ssh-hostkey" "$host" > "$OUTPUT_DIR/08_ssh_analysis_$host.txt" 2>&1 &
        fi
        
        # SMB Analysis
        if grep -q "445/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
            log "INFO" "  - Analizando servicio SMB"
            nmap -p 445 --script "smb-enum-shares,smb-os-discovery,smb-security-mode" "$host" > "$OUTPUT_DIR/09_smb_analysis_$host.txt" 2>&1 &
        fi
        
        # Database Analysis
        if grep -q "3306/open\|5432/open\|1433/open" "$OUTPUT_DIR/03_services_${host}.nmap"; then
            log "INFO" "  - Analizando servicios de base de datos"
            nmap -p 3306,5432,1433 --script "mysql-info,pgsql-info,ms-sql-info" "$host" > "$OUTPUT_DIR/10_db_analysis_$host.txt" 2>&1 &
        fi
        
    done < "$OUTPUT_DIR/02_live_hosts.txt"
    
    wait
    log "SUCCESS" "Analisis de servicios especificos completado"
}

# Fase 5: Generación de reportes
reporting_phase() {
    log "INFO" "=== FASE 5: GENERACION DE REPORTES ==="
    
    # Reporte ejecutivo
    {
        echo "PENTEST REPORT - RUSTSCAN WORKFLOW"
        echo "==================================="
        echo "Fecha: $(date)"
        echo "Target: $TARGET"
        echo "Tipo de escaneo: $SCAN_TYPE"
        echo ""
        echo "RESUMEN EJECUTIVO"
        echo "-----------------"
        echo "Hosts descubiertos: $(wc -l < "$OUTPUT_DIR/02_live_hosts.txt")"
        echo "Servicios web identificados: $(wc -l < "$OUTPUT_DIR/04_web_hosts.txt" 2>/dev/null || echo 0)"
        echo "Escaneos completados: $(find "$OUTPUT_DIR" -name "03_services_*.nmap" | wc -l)"
        echo ""
        echo "HALLAZGOS PRINCIPALES"
        echo "---------------------"
        find "$OUTPUT_DIR" -name "03_services_*.nmap" -exec grep -h "open" {} \; | sort -u | head -15
        echo ""
        echo "ARCHIVOS GENERADOS"
        echo "------------------"
        find "$OUTPUT_DIR" -type f -name "*.txt" -o -name "*.nmap" | sort
    } > "$OUTPUT_DIR/11_executive_report.txt"
    
    # Reporte técnico detallado
    {
        echo "REPORTE TECNICO DETALLADO"
        echo "========================="
        echo ""
        echo "HOSTS Y SERVICIOS DESCUBIERTOS:"
        echo ""
        
        while IFS= read -r host; do
            echo "HOST: $host"
            echo "------"
            if [ -f "$OUTPUT_DIR/03_services_${host}.nmap" ]; then
                grep "open" "$OUTPUT_DIR/03_services_${host}.nmap"
            else
                echo "No hay datos de escaneo disponibles"
            fi
            echo ""
        done < "$OUTPUT_DIR/02_live_hosts.txt"
        
        echo "HERRAMIENTAS UTILIZADAS:"
        echo "-----------------------"
        echo "RustScan: $(rustscan --version 2>/dev/null | head -1 || echo 'No disponible')"
        echo "Nmap: $(nmap --version 2>/dev/null | head -1 || echo 'No disponible')"
        echo "WhatWeb: $(whatweb --version 2>/dev/null | head -1 || echo 'No disponible')"
        echo "Nikto: $(nikto -version 2>/dev/null | head -1 || echo 'No disponible')"
        
    } > "$OUTPUT_DIR/12_technical_report.txt"
    
    log "SUCCESS" "Reportes generados en: $OUTPUT_DIR"
}

# Función principal
main() {
    log "INFO" "Iniciando flujo de pentesting con RustScan"
    
    # Verificar herramientas
    check_tools
    
    # Ejecutar fases del pentest
    local host_count=$(reconnaissance_phase)
    
    if [ "$host_count" -eq 0 ]; then
        log "WARNING" "No se encontraron hosts activos. Finalizando pentest."
        exit 0
    fi
    
    service_scan_phase "$host_count"
    vulnerability_analysis_phase
    specific_service_analysis
    reporting_phase
    
    log "SUCCESS" "Pentest completado exitosamente"
    log "INFO" "Resultados guardados en: $OUTPUT_DIR"
    log "INFO" "Revise los reportes en: $OUTPUT_DIR/11_executive_report.txt"
}

# Manejo de señales
trap 'log "ERROR" "Pentest interrumpido por el usuario"; exit 1' INT TERM

# Ejecución principal
if [ $# -eq 0 ]; then
    echo "Uso: $0 <target> [scan_type]"
    echo "Target: IP, rango de red o archivo con targets"
    echo "Scan types: quick, stealth, comprehensive"
    echo "Ejemplo: $0 192.168.1.0/24 comprehensive"
    exit 1
fi

main "$@"